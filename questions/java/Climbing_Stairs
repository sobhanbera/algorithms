// Using Recursion

class stairs { 
    // A simple recursive program to find 
    // n'th fibonacci number 
    static int fib(int n) 
    { 
        if (n <= 1) 
            return n; 
        return fib(n - 1) + fib(n - 2); 
    } 
  
    // Returns number of ways to reach s'th stair 
    static int countWays(int s) { return fib(s + 1); } 
  
    /* Driver program to test above function */
    public static void main(String args[]) 
    { 
        int s = 4; 
        System.out.println("Number of ways = "
                           + countWays(s)); 
    } 
}

//Time Complexity: O(2n)
//Auxiliary Space: O(n)

// Using Dynamic Programming


// Java program to count number of 
// ways to reach Nth stair 
class GFG { 
  
    // A simple recursive function to find number of ways to 
    // reach the nth stair 
    static int countWays(int n, int dp[]) 
    { 
        if (n <= 1) 
            return dp[n] = 1; 
  
        if (dp[n] != -1) { 
            return dp[n]; 
        } 
        dp[n] = countWays(n - 1, dp) + countWays(n - 2, dp); 
        return dp[n]; 
    } 
  
    // Driver code 
    public static void main(String[] args) 
    { 
        int n = 4; 
        int[] dp = new int[n + 1]; 
        for (int i = 0; i < n + 1; i++) { 
            dp[i] = -1; 
        } 
        System.out.println(countWays(n, dp)); 
    } 
}

//Time Complexity: O(n)
//Auxiliary Space: O(n)
